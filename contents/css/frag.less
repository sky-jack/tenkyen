/*!
 * Frag 2.1.0
 *
 * Frag is a fluid, responsive, simple grid system for
 * CSS written in Sass. http://fragcss.com/
 *
 * Copyright 2013, Rowan Manning.
 * Licensed under the MIT license.
 *
 */

// Maximum widths
@frag-max-width: 1200px;
@frag-oldie-width: 980px;

// Break-points
@frag-break-tablet: 1000px;
@frag-break-mobile: 640px;

// Columns and gutters
@frag-column-count: 12;
@frag-gutter-width: 10px;

// Support old IE? (6–7)
@frag-oldie-support: true;


/* Util: Box for grid/column display */
.frag-box {
    display: block;
    -webkit-box-sizing: border-box; // Safari 3.1–5.0
    -moz-box-sizing: border-box; // Firefox 2+
    box-sizing: border-box; // W3C standard
}

/* Util: Clearfix */
.frag-clearfix {
    *zoom: 1;
    &:before, &:after {
        display: table;
        content: '';
    }
    &:after {
        clear: both;
    }
}

// Util: Define column classes
.frag-cols (@prefix: dsk-, @oldie-support: false) {

    //iterator 
    .iterator(@index) when (@index > 0) {

        //prefix column
        .@{prefix}prefix-@{index}  {
            margin-left: (100% / @frag-column-count) * @index;

            .isoldie() when (@oldie-support = true) {
                *margin-left: (floor(@frag-oldie-width / @frag-column-count) * @index) - (@frag-gutter-width * 2);
            }
            .isoldie();
        }

        //suffix column
          .@{prefix}suffix-@{index}  {
            margin-right: (100% / @frag-column-count) * @index;

            .isoldie() when (@oldie-support = true) {
                *margin-right: (floor(@frag-oldie-width / @frag-column-count) * @index) - (@frag-gutter-width * 2);
            }
            .isoldie();
        }
        // create the grid column selectors
        .@{prefix}@{index} {
            width: (100% / @frag-column-count) * @index;

            .isoldie() when (@oldie-support = true) {
                *width: (floor(@frag-oldie-width / @frag-column-count) * @index) - (@frag-gutter-width * 2);
            }
            .isoldie();
           
        }
        .iterator(@index - 1);
    }

    // end the loop when index is 0
    .iterator (0) {};

    // "call" the loopingClass the first time with highest value
    .iterator (@frag-column-count);

   
    // Column hiding
    .@{prefix}hide {
        display: none;
    }
    .@{prefix}show {
        display: block;
    }

    // Column clearing
    .@{prefix}clear {
        clear: left;
    }
    [dir=rtl] .@{prefix}clear {
        clear: right;
    }
    .@{prefix}unclear {
        clear: none;
    }

    // Old-IE column styles
    .isoldie() when (@oldie-support = true) {
        .oldie-clear {
            display: none;
            *display: block;
            *clear: both;
        }
    } 
    .isoldie(); 

}

/* Grid: Base styles */
.grid {
    &:extend(.frag-box all);
    &:extend(.frag-clearfix all);
    width: auto;
    max-width: @frag-max-width;
    
    // Old-IE grid styles
    .isoldie()  when (@frag-oldie-support = true )  {
        *width: @frag-oldie-width;

        // Flatten nested grids
        .grid {
            *width: auto;
            .col {
                *width: auto;
                *float: none;
            }
        }
    }
    .isoldie()
}

/* Grid: Column styles */
.col {
    &:extend(.frag-box all);
    float: left;
    padding-left: @frag-gutter-width;
    padding-right: @frag-gutter-width;
}
[dir=rtl] .col {
    float: right;
}

/* Grid: Remove column gutter */
.col-degutter {
    padding-left: 0;
    padding-right: 0;

    // Re-add padding for Old IE. Sorry.
    .isoldie()  when (@frag-oldie-support = true) {
        *padding-left: @frag-gutter-width;
        *padding-right: @frag-gutter-width;
    }
    .isoldie();
}

/* Grid: Base columns */
.frag-cols (dsk-, @frag-oldie-support);

// Tablet break-point
@media all and (max-width: @frag-break-tablet) {
    .frag-cols (tab-);
}

// Mobile break-point
@media all and (max-width: @frag-break-mobile) {
    .frag-cols (mob-);
}
